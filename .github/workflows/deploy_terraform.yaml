name: Deploy Terraform Code
on:
  workflow_dispatch:
  push:
    branches:
      - main
    pull_request:

env:
  AWS_REGION : ap-southeast-2 #Change to reflect your Region

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  terraform:
    name: Deploy Terraform
    runs-on: ubuntu-latest
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./modular_infrastructure
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout Git Repository
      uses: actions/checkout@v3
    
    # Assumes an AWS Role  
    - name: Assume AWS Role via GitHub OIDC
      uses: aws-actions/configure-aws-credentials@v3
      with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github_actions_runner_deployer
          aws-region: ${{ env.AWS_REGION }}
<<<<<<< HEAD

=======
    
>>>>>>> 2de85213a53444d2e5763fdccb88f70d75c77e32
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Install Terraform CLI on GitHub Actions Runner
      uses: hashicorp/setup-terraform@v1

    # Initialise a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Execute Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Execute Terraform Format
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Execute Terraform Plan
      run: terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Execute Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false